
[[ READ METRICS FROM CLOUDWATCH AGENT ]]


[[ (QUICK SETUP) AWS SDK ENV FOR JAVA on Fedora ]]

## GET SOFTWARE
## 
# Install Java JDK
sudo yum -y install java-1.8.0-openjdk\*
sudo yum -y install maven git wget curl sshpass
java -version 


## GET AWS JAVA SDKv2
## 
mkdir -p /home/oem/SDK/AWS_SDK/
cd  /home/oem/SDK/AWS_SDK/

cat <<EOF> pom.xml
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>libs</groupId>
  <artifactId>mylibs</artifactId>
  <version>1</version>
<dependencies>
<dependency>
  <groupId>software.amazon.awssdk</groupId>
  <artifactId>aws-sdk-java</artifactId>
  <version>2.11.12</version>
</dependency>
</dependencies>
</project>
EOF

mkdir ./LIB

mvn -version
mvn -v
mvn dependency:copy-dependencies -DoutputDirectory=./LIB -Dhttps.protocols=TLSv1.2
find  ./LIB | sort -V 






[[ TEST BIULD ENVIRONMENT: PULL DOWN EXAMPLE/BUILD/RUN ]]

## SET CREDS
## 

vi ~/.aws/credentials 

AWS_REGION = us-east-1
aws_access_key_id = ASIAUF25ZQAX6Y4HARFX
aws_secret_access_key = HLfvEuMSMW9s+28kwU2JedUwLBBXXYE5nf2aKT36
aws_session_token = IQoJb3JpZ2luX2VjEJb//////////wEaCXVzLWVhc3QtMSJIMEYCIQDUxOEMkJRI0J9DzliG2ZBWTm5VdhwfzT14U6/SytsAGgIhAMcQu+Lu1xcuBygjzffO7PkxObiQNYb1mqQ00owgScbyKv8BCC4QARoMMjg3NDIyNjQ0MjcxIgz1wYT+kJfBnp5GWsUq3AF/0eJfFHaYST3NAsyBtVQoL3SuufR0wqW7GIPrsNXoWO2G4mjriVETUt/wC5dtEc5WgY6VLmMPXO5bFpxaBTQ8r8ykC7vt64cDegYL7bnzidxLTQ4SqQp0I92JH9eYcoiq+pJlq4vNWrzQv0UEUJ49MOSQ4SpjH48vIhgv3dXPmKZir8V7wtu+NKh2mZ5SnBjw2II2R83G9B3Lq/ZwQoVNdk7dFn1trEDYs1MfplXKv2VpN3tG8HinxpZwTgBtif9+TuGeAop7hCa52ZE4pq+Y0jJEgrs+qWGE0z8sMIT07PcFOugBcRmqh0ygfo+OJ71Hz7bsiFBKRiRvEtPeFIkDUnyFORX0gjKBR376PMr2mzE0TrgU5a+KrzrzR4tKGQ7OlHwSC7sn5eRiteYn8kg45b/VvEsOlfwybls0Jf1njZhhHcQVaeYSf95DUG7+oUkj5LdueR82uYDOLKmoZ40L0Mm7InsDcvawVNIgIB11TusDtOhCZoHmAs7zaK+I4KSOyDScjQ5ScRhiT2/momtPwKqDSQGpKGhCfraacrJn84S2KUHktoiNkW3Pqd9a5X8KCOnctPg1gRo+9jaqxBp+pKeO5mBLY+EuaH5nDw==


## LIST EC2 INSTANCES IN (US_EAST_1)
CODE=https://raw.githubusercontent.com/awsdocs/aws-doc-sdk-examples/master/javav2/example_code/ec2/src/main/java/com/example/ec2/DescribeInstances.java
CLASS=$(basename ${CODE} | sed 's/\..*//')
cd /home/oem/SDK/AWS_SDK/
wget ${CODE}
sed -i '/^package/d' ${CLASS}.java
sed -i '/Region.US_...._./s/=.*/= Region.US_EAST_1;/' ${CLASS}.java
CLASSPATH=$(echo LIB/*.jar | tr ' ' ':')
javac -cp ".:${CLASSPATH}" ${CLASS}.java
java -cp ".:${CLASSPATH}" ${CLASS}





@MAIN
[[ VERIFY IF CLOUDWATCH AGENT IS SENDING DATA ]]

Used this to Get a Metric to see if Instnace is set up to Send Data properly from the install Cloudwatch Agent.

#         Metric met = Metric.builder()
#                   .metricName("DiskReadBytes") => CPUUtilization
#                    .namespace("AWS/EC2")
#                     .build();

### SET AWS CREDENTIALS
###
###
vi ~/.aws/credentials 

[default]
AWS_REGION = us-east-1
aws_access_key_id = ASIAUF25ZQAX6Y4HARFX
aws_secret_access_key = HLfvEuMSMW9s+28kwU2JedUwLBBXXYE5nf2aKT36
aws_session_token = IQoJb3JpZ2luX2VjEJb//////////wEaCXVzLWVhc3QtMSJIMEYCIQDUxOEMkJRI0J9DzliG2ZBWTm5VdhwfzT14U6/SytsAGgIhAMcQu+Lu1xcuBygjzffO7PkxObiQNYb1mqQ00owgScbyKv8BCC4QARoMMjg3NDIyNjQ0MjcxIgz1wYT+kJfBnp5GWsUq3AF/0eJfFHaYST3NAsyBtVQoL3SuufR0wqW7GIPrsNXoWO2G4mjriVETUt/wC5dtEc5WgY6VLmMPXO5bFpxaBTQ8r8ykC7vt64cDegYL7bnzidxLTQ4SqQp0I92JH9eYcoiq+pJlq4vNWrzQv0UEUJ49MOSQ4SpjH48vIhgv3dXPmKZir8V7wtu+NKh2mZ5SnBjw2II2R83G9B3Lq/ZwQoVNdk7dFn1trEDYs1MfplXKv2VpN3tG8HinxpZwTgBtif9+TuGeAop7hCa52ZE4pq+Y0jJEgrs+qWGE0z8sMIT07PcFOugBcRmqh0ygfo+OJ71Hz7bsiFBKRiRvEtPeFIkDUnyFORX0gjKBR376PMr2mzE0TrgU5a+KrzrzR4tKGQ7OlHwSC7sn5eRiteYn8kg45b/VvEsOlfwybls0Jf1njZhhHcQVaeYSf95DUG7+oUkj5LdueR82uYDOLKmoZ40L0Mm7InsDcvawVNIgIB11TusDtOhCZoHmAs7zaK+I4KSOyDScjQ5ScRhiT2/momtPwKqDSQGpKGhCfraacrJn84S2KUHktoiNkW3Pqd9a5X8KCOnctPg1gRo+9jaqxBp+pKeO5mBLY+EuaH5nDw==


### Get and mod code
### 
### 

#NOTE: HERE I PULL DOWN AND MODIFY CODE FROM AN AWS SDK EXAMPLE

CODE=https://raw.githubusercontent.com/awsdocs/aws-doc-sdk-examples/master/javav2/example_code/cloudwatch/src/main/java/com/example/cloudwatch/GetMetricData.java
CLASS=$(basename ${CODE} | sed 's/\..*//')
cd /home/oem/SDK/AWS_SDK/
#wget ${CODE}
sed -i '/^package/d' ${CLASS}.java
sed -i '/Region.US_...._./s/=.*/= Region.US_EAST_1;/' ${CLASS}.java
CLASSPATH=$(echo LIB/*.jar | tr ' ' ':')

### ADD: System.out.println("Object Data: \n "+item.toString());
sed -i '/The status code is/a System.out.println("Object Data: \\n "+item.toString());' ${CLASS}.java

NOTE: Experimenting with "sed" here; you'll likely want to make these into arguments.....

## SET_DATE_TIME ## start = Instant.parse("2020-08-23T10:12:35Z");
sed -i '/start/s/".*"/"'"$(date -d "2 hours ago" +%Y-%m-%dT%I:%M:%SZ)"'"/' ${CLASS}.java
sed -i '/metricName/s/".*"/"DiskUtilization"/' ${CLASS}.java
sed -i '/namespace/s/".*"/"CWAgent"/' ${CLASS}.java

#NOTE: Add code "GetMetricData.java" when editor pops up; save; close and it will compile and run

gedit -w ${CLASS}.java && \
javac -cp ".:${CLASSPATH}" ${CLASS}.java && \
sed -i '/start/s/".*"/"'"$(date -d "2 hours ago" +%Y-%m-%dT%I:%M:%SZ)"'"/' ${CLASS}.java && \
java -cp ".:${CLASSPATH}" ${CLASS} "i-0100dd514b0bd8ffa"


## RUN IT AS A LOOP
for EC2 in $(
echo '
i-08375d47745939ab9
i-0c11fd15f91959381
i-036ea8c617bbfc799
'); do
java -cp ".:${CLASSPATH}" ${CLASS} "${EC2}"
done



## ADD CODE: GetMetricData.java (rest of the mods are not by "sed")
//GetMetricData.java
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.cloudwatch.CloudWatchClient;
import software.amazon.awssdk.services.cloudwatch.model.GetMetricDataResponse;
import software.amazon.awssdk.services.cloudwatch.model.Metric;
import software.amazon.awssdk.services.cloudwatch.model.MetricStat;
import software.amazon.awssdk.services.cloudwatch.model.MetricDataQuery;
import software.amazon.awssdk.services.cloudwatch.model.GetMetricDataRequest;
import software.amazon.awssdk.services.cloudwatch.model.MetricDataResult;
import software.amazon.awssdk.services.cloudwatch.model.CloudWatchException;
import software.amazon.awssdk.services.cloudwatch.model.Dimension; //ADD
import software.amazon.awssdk.services.cloudwatch.model.StandardUnit; //ADD
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class GetMetricData {

    public static void main(String[] args) {
        String InstanceId = args[0];  //ADD
        Region region = Region.US_EAST_1;
        CloudWatchClient cw = CloudWatchClient.builder()
                .region(region)
                .build();

        getMetData(cw, InstanceId) ;
    }

    // snippet-start:[cloudwatch.java2.get_metric_alarm.main]
    public static void getMetData( CloudWatchClient cw, String InstanceId) {//MOD

        try {
            // Set the date
            Instant start = Instant.ofEpochMilli(new Date().getTime());
            start = Instant.parse("2020-10-01T09:40:55Z");
            Instant endDate = Instant.now();
            Dimension dimensionsName = Dimension.builder().name("InstanceId").value(InstanceId).build(); //ADD

            Metric met = Metric.builder()
                    .metricName("DiskUtilization") //MOD
                    .namespace("CWAgent")  //MOD
                    .dimensions(dimensionsName)  //ADD
                    .build();

            MetricStat metStat = MetricStat.builder()
                    .stat("Average")//MOD: valid values are: SampleCount, Average, Sum, Minimum, Maximum
                    .period(60)
                    .metric(met)
                    .build();

            MetricDataQuery dataQUery = MetricDataQuery.builder()
                    .metricStat(metStat)
                    .id("foo2")
                    .returnData(true)
                    .build();

            List<MetricDataQuery> dq = new ArrayList();
            dq.add(dataQUery);

            GetMetricDataRequest getMetReq = GetMetricDataRequest.builder()
                .maxDatapoints(100)
                .startTime(start)
                .endTime(endDate)
                .metricDataQueries(dq)
                .build();

            GetMetricDataResponse response = cw.getMetricData(getMetReq);

            List<MetricDataResult> data = response.metricDataResults();

            for (int i = 0; i < data.size(); i++) {
                MetricDataResult item = (MetricDataResult) data.get(i);
                System.out.print("ID: "+ InstanceId);  //ADD
                System.out.print(", Namespace: CWAgent");  //ADD
                System.out.print(", MetricName: DiskUtilization");  //ADD
                System.out.println(", The status code is "+item.statusCode().toString());
                System.out.println("Object Data: \n "+item.toString());

                MetricDataResult item = (MetricDataResult) data.get(i);
                System.out.println("ID: "+ InstanceId);  //ADD
                System.out.println("Namespace: CWAgent");  //ADD
                System.out.println("MetricName: DiskUtilization");  //ADD
                //System.out.println("The label is "+item.label());
                System.out.println("The status code is "+item.statusCode().toString());
                System.out.println("Object Data: \n "+item.toString());

                //LIST_TIME
                List<Instant> dataPoint_time = item.timestamps();
                for (Object DataPoint_t : dataPoint_time) {
                    System.out.println(" VALUE: " + DataPoint_t .toString());
                }
                //LIST_DATA
                List<Double> dataPoint_val = item.values();
                for (Object dataPoint_v : dataPoint_val ) {
                    System.out.println(" VALUE: " + dataPoint_v.toString());
                }

            }

        } catch (CloudWatchException e) {
            System.err.println(e.awsErrorDetails().errorMessage());
            System.exit(1);
        }
    }
}




